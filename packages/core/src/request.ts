import { Request as IRequest } from 'express';

@Injectable()
export class Request {
    _read: IRequest['_read'];
    accepted: IRequest['accepted'];
    accepts: IRequest['accepts'];
    acceptsCharsets: IRequest['acceptsCharsets'];
    acceptsEncodings: IRequest['acceptsEncodings'];
    acceptsLanguages: IRequest['acceptsLanguages'];
    addListener: IRequest['addListener'];
    app: IRequest['app'];
    baseUrl: IRequest['baseUrl'];
    body: IRequest['body'];
    clearCookie: IRequest['clearCookie'];
    connection: IRequest['connection'];
    cookies: IRequest['cookies'];
    destroy: IRequest['destroy'];
    emit: IRequest['emit'];
    fresh: IRequest['fresh'];
    get: IRequest['get'];
    header: IRequest['header'];
    headers: IRequest['headers'];
    host: IRequest['host'];
    hostname: IRequest['hostname'];
    httpVersion: IRequest['httpVersion'];
    httpVersionMajor: IRequest['httpVersionMajor'];
    httpVersionMinor: IRequest['httpVersionMinor'];
    ip: IRequest['ip'];
    ips: IRequest['ips'];
    is: IRequest['is'];
    isPaused: IRequest['isPaused'];
    method: IRequest['method'];
    on: IRequest['on'];
    once: IRequest['once'];
    originalUrl: IRequest['originalUrl'];
    param: IRequest['param'];
    params: IRequest['params'];
    path: IRequest['path'];
    pause: () => this;
    pipe: IRequest['pipe'];
    prependListener: IRequest['prependListener'];
    prependOnceListener: IRequest['prependOnceListener'];
    protocol: IRequest['protocol'];
    push: IRequest['push'];
    query: IRequest['query'];
    range: IRequest['range'];
    rawHeaders: IRequest['rawHeaders'];
    rawTrailers: IRequest['rawTrailers'];
    read: IRequest['read'];
    readable: IRequest['readable'];
    removeListener: IRequest['removeListener'];
    resume: () => this;
    route: IRequest['route'];
    secure: IRequest['secure'];
    setEncoding: (encoding: string) => this;
    setTimeout: IRequest['setTimeout'];
    signedCookies: IRequest['signedCookies'];
    socket: IRequest['socket'];
    stale: IRequest['stale'];
    subdomains: IRequest['subdomains'];
    trailers: IRequest['trailers'];
    unpipe: <T extends NodeJS.WritableStream>(destination?: T) => this;
    unshift: IRequest['unshift'];
    url: IRequest['url'];
    wrap: IRequest['wrap'];
    xhr: IRequest['xhr'];
}
